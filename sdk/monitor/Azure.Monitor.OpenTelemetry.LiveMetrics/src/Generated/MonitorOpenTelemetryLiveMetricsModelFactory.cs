// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace Azure.Monitor.OpenTelemetry.LiveMetrics.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class MonitorOpenTelemetryLiveMetricsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.CollectionConfigurationInfo"/>. </summary>
        /// <param name="eTag"> An encoded string that indicates whether the collection configuration is changed. </param>
        /// <param name="metrics"> An array of metric configuration info. </param>
        /// <param name="documentStreams"> An array of document stream configuration info. </param>
        /// <param name="quotaInfo"> Controls document quotas to be sent to Live Metrics. </param>
        /// <returns> A new <see cref="Models.CollectionConfigurationInfo"/> instance for mocking. </returns>
        public static CollectionConfigurationInfo CollectionConfigurationInfo(string eTag = null, IEnumerable<DerivedMetricInfo> metrics = null, IEnumerable<DocumentStreamInfo> documentStreams = null, QuotaConfigurationInfo quotaInfo = null)
        {
            metrics ??= new List<DerivedMetricInfo>();
            documentStreams ??= new List<DocumentStreamInfo>();

            return new CollectionConfigurationInfo(eTag, metrics?.ToList(), documentStreams?.ToList(), quotaInfo, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DerivedMetricInfo"/>. </summary>
        /// <param name="id"> metric configuration identifier. </param>
        /// <param name="telemetryType"> Telemetry type. </param>
        /// <param name="filterGroups"> A collection of filters to scope metrics that UX needs. </param>
        /// <param name="projection"> Telemetry's metric dimension whose value is to be aggregated. Example values: Duration, Count(),... </param>
        /// <param name="aggregation"> Aggregation type. This is the aggregation done from everything within a single server. </param>
        /// <param name="backEndAggregation"> Aggregation type. This Aggregation is done across the values for all the servers taken together. </param>
        /// <returns> A new <see cref="Models.DerivedMetricInfo"/> instance for mocking. </returns>
        public static DerivedMetricInfo DerivedMetricInfo(string id = null, string telemetryType = null, IEnumerable<FilterConjunctionGroupInfo> filterGroups = null, string projection = null, AggregationType aggregation = default, AggregationType backEndAggregation = default)
        {
            filterGroups ??= new List<FilterConjunctionGroupInfo>();

            return new DerivedMetricInfo(
                id,
                telemetryType,
                filterGroups?.ToList(),
                projection,
                aggregation,
                backEndAggregation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentStreamInfo"/>. </summary>
        /// <param name="id"> Identifier of the document stream initiated by a UX. </param>
        /// <param name="documentFilterGroups"> Gets or sets an OR-connected collection of filter groups. </param>
        /// <returns> A new <see cref="Models.DocumentStreamInfo"/> instance for mocking. </returns>
        public static DocumentStreamInfo DocumentStreamInfo(string id = null, IEnumerable<DocumentFilterConjunctionGroupInfo> documentFilterGroups = null)
        {
            documentFilterGroups ??= new List<DocumentFilterConjunctionGroupInfo>();

            return new DocumentStreamInfo(id, documentFilterGroups?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentFilterConjunctionGroupInfo"/>. </summary>
        /// <param name="telemetryType"> Telemetry type. </param>
        /// <param name="filters"> An array of filter groups. </param>
        /// <returns> A new <see cref="Models.DocumentFilterConjunctionGroupInfo"/> instance for mocking. </returns>
        public static DocumentFilterConjunctionGroupInfo DocumentFilterConjunctionGroupInfo(TelemetryType telemetryType = default, FilterConjunctionGroupInfo filters = null)
        {
            return new DocumentFilterConjunctionGroupInfo(telemetryType, filters, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.QuotaConfigurationInfo"/>. </summary>
        /// <param name="initialQuota"> Initial quota. </param>
        /// <param name="maxQuota"> Max quota. </param>
        /// <param name="quotaAccrualRatePerSec"> Quota accrual rate per second. </param>
        /// <returns> A new <see cref="Models.QuotaConfigurationInfo"/> instance for mocking. </returns>
        public static QuotaConfigurationInfo QuotaConfigurationInfo(float? initialQuota = null, float maxQuota = default, float quotaAccrualRatePerSec = default)
        {
            return new QuotaConfigurationInfo(initialQuota, maxQuota, quotaAccrualRatePerSec, serializedAdditionalRawData: null);
        }
    }
}
