// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Speech.Transcription.Samples
{
    public partial class Samples_SpeechClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_SubmitTranscription_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    timeToLive = "<timeToLive>",
                },
                locale = "<locale>",
                displayName = "<displayName>",
            });
            Response response = client.SubmitTranscription(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLive").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_SubmitTranscription_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    timeToLive = "<timeToLive>",
                },
                locale = "<locale>",
                displayName = "<displayName>",
            });
            Response response = await client.SubmitTranscriptionAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLive").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_SubmitTranscription_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Transcription transcription = new Transcription(new TranscriptionProperties("<timeToLive>"), "<locale>", "<displayName>");
            Response<Transcription> response = client.SubmitTranscription(transcription);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_SubmitTranscription_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Transcription transcription = new Transcription(new TranscriptionProperties("<timeToLive>"), "<locale>", "<displayName>");
            Response<Transcription> response = await client.SubmitTranscriptionAsync(transcription);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_SubmitTranscription_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                links = new object(),
                properties = new
                {
                    wordLevelTimestampsEnabled = true,
                    displayFormWordLevelTimestampsEnabled = true,
                    channels = new object[]
            {
1234
            },
                    destinationContainerUrl = "http://localhost:3000",
                    punctuationMode = "None",
                    profanityFilterMode = "None",
                    timeToLive = "<timeToLive>",
                    error = new object(),
                    diarization = new
                    {
                        enabled = true,
                        maxSpeakers = 1234,
                    },
                    languageIdentification = new
                    {
                        mode = "Continuous",
                        candidateLocales = new object[]
            {
"<candidateLocales>"
            },
                        speechModelMapping = new
                        {
                            key = new
                            {
                                self = "http://localhost:3000",
                            },
                        },
                    },
                },
                contentUrls = new object[]
            {
"http://localhost:3000"
            },
                contentContainerUrl = "http://localhost:3000",
                locale = "<locale>",
                displayName = "<displayName>",
                description = "<description>",
                customProperties = new
                {
                    key = "<customProperties>",
                },
                status = "NotStarted",
            });
            Response response = client.SubmitTranscription(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLive").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
            Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("project").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_SubmitTranscription_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                links = new object(),
                properties = new
                {
                    wordLevelTimestampsEnabled = true,
                    displayFormWordLevelTimestampsEnabled = true,
                    channels = new object[]
            {
1234
            },
                    destinationContainerUrl = "http://localhost:3000",
                    punctuationMode = "None",
                    profanityFilterMode = "None",
                    timeToLive = "<timeToLive>",
                    error = new object(),
                    diarization = new
                    {
                        enabled = true,
                        maxSpeakers = 1234,
                    },
                    languageIdentification = new
                    {
                        mode = "Continuous",
                        candidateLocales = new object[]
            {
"<candidateLocales>"
            },
                        speechModelMapping = new
                        {
                            key = new
                            {
                                self = "http://localhost:3000",
                            },
                        },
                    },
                },
                contentUrls = new object[]
            {
"http://localhost:3000"
            },
                contentContainerUrl = "http://localhost:3000",
                locale = "<locale>",
                displayName = "<displayName>",
                description = "<description>",
                customProperties = new
                {
                    key = "<customProperties>",
                },
                status = "NotStarted",
            });
            Response response = await client.SubmitTranscriptionAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLive").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
            Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("project").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_SubmitTranscription_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Transcription transcription = new Transcription(new TranscriptionProperties("<timeToLive>")
            {
                WordLevelTimestampsEnabled = true,
                DisplayFormWordLevelTimestampsEnabled = true,
                Channels = { 1234 },
                DestinationContainerUrl = new Uri("http://localhost:3000"),
                PunctuationMode = PunctuationMode.None,
                ProfanityFilterMode = ProfanityFilterMode.None,
                Error = new EntityError(),
                Diarization = new DiarizationProperties
                {
                    Enabled = true,
                    MaxSpeakers = 1234,
                },
                LanguageIdentification = new LanguageIdentificationProperties(new string[] { "<candidateLocales>" })
                {
                    Mode = LanguageIdentificationMode.Continuous,
                    SpeechModelMapping =
{
["key"] = new EntityReference(new Uri("http://localhost:3000"))
},
                },
            }, "<locale>", "<displayName>")
            {
                Links = new TranscriptionLinks(),
                Model = default,
                Dataset = default,
                ContentUrls = { new Uri("http://localhost:3000") },
                ContentContainerUrl = new Uri("http://localhost:3000"),
                Description = "<description>",
                CustomProperties =
{
["key"] = "<customProperties>"
},
                Project = default,
                Status = Status.NotStarted,
            };
            Response<Transcription> response = client.SubmitTranscription(transcription);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_SubmitTranscription_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Transcription transcription = new Transcription(new TranscriptionProperties("<timeToLive>")
            {
                WordLevelTimestampsEnabled = true,
                DisplayFormWordLevelTimestampsEnabled = true,
                Channels = { 1234 },
                DestinationContainerUrl = new Uri("http://localhost:3000"),
                PunctuationMode = PunctuationMode.None,
                ProfanityFilterMode = ProfanityFilterMode.None,
                Error = new EntityError(),
                Diarization = new DiarizationProperties
                {
                    Enabled = true,
                    MaxSpeakers = 1234,
                },
                LanguageIdentification = new LanguageIdentificationProperties(new string[] { "<candidateLocales>" })
                {
                    Mode = LanguageIdentificationMode.Continuous,
                    SpeechModelMapping =
{
["key"] = new EntityReference(new Uri("http://localhost:3000"))
},
                },
            }, "<locale>", "<displayName>")
            {
                Links = new TranscriptionLinks(),
                Model = default,
                Dataset = default,
                ContentUrls = { new Uri("http://localhost:3000") },
                ContentContainerUrl = new Uri("http://localhost:3000"),
                Description = "<description>",
                CustomProperties =
{
["key"] = "<customProperties>"
},
                Project = default,
                Status = Status.NotStarted,
            };
            Response<Transcription> response = await client.SubmitTranscriptionAsync(transcription);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_TranscribeTranscription_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                audio = File.OpenRead("<filePath>"),
            });
            Response response = client.TranscribeTranscription(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_TranscribeTranscription_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                audio = File.OpenRead("<filePath>"),
            });
            Response response = await client.TranscribeTranscriptionAsync(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_TranscribeTranscription_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response<TranscribeResult> response = client.TranscribeTranscription(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_TranscribeTranscription_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response<TranscribeResult> response = await client.TranscribeTranscriptionAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_TranscribeTranscription_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                definition = new
                {
                    locales = new object[]
            {
"<locales>"
            },
                    models = new
                    {
                        key = "http://localhost:3000",
                    },
                    profanityFilterMode = "None",
                    diarization = new
                    {
                        enabled = true,
                        maxSpeakers = 1234,
                    },
                    channels = new object[]
            {
1234
            },
                },
                audio = File.OpenRead("<filePath>"),
            });
            Response response = client.TranscribeTranscription(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("channel").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("channel").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("speaker").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_TranscribeTranscription_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                definition = new
                {
                    locales = new object[]
            {
"<locales>"
            },
                    models = new
                    {
                        key = "http://localhost:3000",
                    },
                    profanityFilterMode = "None",
                    diarization = new
                    {
                        enabled = true,
                        maxSpeakers = 1234,
                    },
                    channels = new object[]
            {
1234
            },
                },
                audio = File.OpenRead("<filePath>"),
            });
            Response response = await client.TranscribeTranscriptionAsync(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("channel").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("channel").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("speaker").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_TranscribeTranscription_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            TranscribeDefinition definition = new TranscribeDefinition
            {
                Locales = { "<locales>" },
                Models =
{
["key"] = new Uri("http://localhost:3000")
},
                ProfanityFilterMode = ProfanityFilterMode.None,
                Diarization = new TranscribeDiarizationProperties
                {
                    Enabled = true,
                    MaxSpeakers = 1234,
                },
                Channels = { 1234 },
            };
            Response<TranscribeResult> response = client.TranscribeTranscription(null, definition: definition);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_TranscribeTranscription_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            TranscribeDefinition definition = new TranscribeDefinition
            {
                Locales = { "<locales>" },
                Models =
{
["key"] = new Uri("http://localhost:3000")
},
                ProfanityFilterMode = ProfanityFilterMode.None,
                Diarization = new TranscribeDiarizationProperties
                {
                    Enabled = true,
                    MaxSpeakers = 1234,
                },
                Channels = { 1234 },
            };
            Response<TranscribeResult> response = await client.TranscribeTranscriptionAsync(null, definition: definition);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_GetTranscriptions_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response response = client.GetTranscriptions(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_GetTranscriptions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response response = await client.GetTranscriptionsAsync(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_GetTranscriptions_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response<PageableTranscription> response = client.GetTranscriptions();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_GetTranscriptions_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response<PageableTranscription> response = await client.GetTranscriptionsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_GetTranscriptions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response response = client.GetTranscriptions(1234, 1234, "<filter>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("links").GetProperty("files").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("channels")[0].ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("punctuationMode").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("profanityFilterMode").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("timeToLive").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("model").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("dataset").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("contentUrls")[0].ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("contentContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("customProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("project").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("@nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_GetTranscriptions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response response = await client.GetTranscriptionsAsync(1234, 1234, "<filter>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("links").GetProperty("files").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("channels")[0].ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("punctuationMode").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("profanityFilterMode").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("timeToLive").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("model").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("dataset").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("contentUrls")[0].ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("contentContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("customProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("project").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("@nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_GetTranscriptions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response<PageableTranscription> response = client.GetTranscriptions(skip: 1234, top: 1234, filter: "<filter>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_GetTranscriptions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response<PageableTranscription> response = await client.GetTranscriptionsAsync(skip: 1234, top: 1234, filter: "<filter>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_GetTranscription_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response response = client.GetTranscription("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLive").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_GetTranscription_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response response = await client.GetTranscriptionAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLive").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_GetTranscription_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response<Transcription> response = client.GetTranscription("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_GetTranscription_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response<Transcription> response = await client.GetTranscriptionAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_GetTranscription_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response response = client.GetTranscription("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLive").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
            Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("project").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_GetTranscription_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response response = await client.GetTranscriptionAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLive").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
            Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("project").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_GetTranscription_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response<Transcription> response = client.GetTranscription("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_GetTranscription_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response<Transcription> response = await client.GetTranscriptionAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_PatchTranscription_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.PatchTranscription("<id>", content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLive").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_PatchTranscription_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.PatchTranscriptionAsync("<id>", content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLive").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_PatchTranscription_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                description = "<description>",
                customProperties = new
                {
                    key = "<customProperties>",
                },
                project = new
                {
                    self = "http://localhost:3000",
                },
            });
            Response response = client.PatchTranscription("<id>", content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLive").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
            Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("project").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_PatchTranscription_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                description = "<description>",
                customProperties = new
                {
                    key = "<customProperties>",
                },
                project = new
                {
                    self = "http://localhost:3000",
                },
            });
            Response response = await client.PatchTranscriptionAsync("<id>", content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("links").GetProperty("files").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("wordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("displayFormWordLevelTimestampsEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("duration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("channels")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("destinationContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("punctuationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("profanityFilterMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeToLive").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diarization").GetProperty("maxSpeakers").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("candidateLocales")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("languageIdentification").GetProperty("speechModelMapping").GetProperty("<key>").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("model").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("dataset").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("contentUrls")[0].ToString());
            Console.WriteLine(result.GetProperty("contentContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("customProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("project").GetProperty("self").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_DeleteTranscription_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response response = client.DeleteTranscription("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_DeleteTranscription_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response response = await client.DeleteTranscriptionAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Speech_DeleteTranscription_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response response = client.DeleteTranscription("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Speech_DeleteTranscription_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SpeechClient client = new SpeechClient(endpoint, credential);

            Response response = await client.DeleteTranscriptionAsync("<id>");

            Console.WriteLine(response.Status);
        }
    }
}
