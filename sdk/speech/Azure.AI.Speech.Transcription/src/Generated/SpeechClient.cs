// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.Speech.Transcription
{
    // Data plane generated client.
    /// <summary> The Speech service client. </summary>
    public partial class SpeechClient
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly ServiceApiVersions? _serviceApiVersionsQueryParameter;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of SpeechClient for mocking. </summary>
        protected SpeechClient()
        {
        }

        /// <summary> Initializes a new instance of SpeechClient. </summary>
        /// <param name="endpoint"> Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public SpeechClient(Uri endpoint, AzureKeyCredential credential) : this(endpoint, credential, new SpeechClientOptions())
        {
        }

        /// <summary> Initializes a new instance of SpeechClient. </summary>
        /// <param name="endpoint"> Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public SpeechClient(Uri endpoint, AzureKeyCredential credential, SpeechClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new SpeechClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
            _serviceApiVersionsQueryParameter = options.ServiceApiVersionsQueryParameter;
        }

        /// <summary> Submits a new transcription job. </summary>
        /// <param name="transcription"> The <see cref="Transcription"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transcription"/> is null. </exception>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='SubmitTranscriptionAsync(Transcription,CancellationToken)']/*" />
        public virtual async Task<Response<Transcription>> SubmitTranscriptionAsync(Transcription transcription, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(transcription, nameof(transcription));

            using RequestContent content = transcription.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await SubmitTranscriptionAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(Transcription.FromResponse(response), response);
        }

        /// <summary> Submits a new transcription job. </summary>
        /// <param name="transcription"> The <see cref="Transcription"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transcription"/> is null. </exception>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='SubmitTranscription(Transcription,CancellationToken)']/*" />
        public virtual Response<Transcription> SubmitTranscription(Transcription transcription, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(transcription, nameof(transcription));

            using RequestContent content = transcription.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = SubmitTranscription(content, context);
            return Response.FromValue(Transcription.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Submits a new transcription job.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SubmitTranscriptionAsync(Transcription,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='SubmitTranscriptionAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> SubmitTranscriptionAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SpeechClient.SubmitTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSubmitTranscriptionRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Submits a new transcription job.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SubmitTranscription(Transcription,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='SubmitTranscription(RequestContent,RequestContext)']/*" />
        public virtual Response SubmitTranscription(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SpeechClient.SubmitTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSubmitTranscriptionRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Transcribes the provided audio stream. </summary>
        /// <param name="audio"> The audio as a stream of bytes. </param>
        /// <param name="definition"> Metadata for a fast transcription request. This field contains a JSON-serialized object of type `TranscribeDefinition`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="audio"/> is null. </exception>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='TranscribeTranscriptionAsync(Stream,TranscribeDefinition,CancellationToken)']/*" />
        public virtual async Task<Response<TranscribeResult>> TranscribeTranscriptionAsync(Stream audio, TranscribeDefinition definition = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(audio, nameof(audio));

            TranscribeTranscriptionRequest transcribeTranscriptionRequest = new TranscribeTranscriptionRequest(definition, audio, null);
            using MultipartFormDataRequestContent content = transcribeTranscriptionRequest.ToMultipartRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await TranscribeTranscriptionAsync(content, content.ContentType, context).ConfigureAwait(false);
            return Response.FromValue(TranscribeResult.FromResponse(response), response);
        }

        /// <summary> Transcribes the provided audio stream. </summary>
        /// <param name="audio"> The audio as a stream of bytes. </param>
        /// <param name="definition"> Metadata for a fast transcription request. This field contains a JSON-serialized object of type `TranscribeDefinition`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="audio"/> is null. </exception>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='TranscribeTranscription(Stream,TranscribeDefinition,CancellationToken)']/*" />
        public virtual Response<TranscribeResult> TranscribeTranscription(Stream audio, TranscribeDefinition definition = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(audio, nameof(audio));

            TranscribeTranscriptionRequest transcribeTranscriptionRequest = new TranscribeTranscriptionRequest(definition, audio, null);
            using MultipartFormDataRequestContent content = transcribeTranscriptionRequest.ToMultipartRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = TranscribeTranscription(content, content.ContentType, context);
            return Response.FromValue(TranscribeResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Transcribes the provided audio stream.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="TranscribeTranscriptionAsync(Stream,TranscribeDefinition,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> The <see cref="string"/> to use. Allowed values: "multipart/form-data". </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='TranscribeTranscriptionAsync(RequestContent,string,RequestContext)']/*" />
        public virtual async Task<Response> TranscribeTranscriptionAsync(RequestContent content, string contentType, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SpeechClient.TranscribeTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTranscribeTranscriptionRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Transcribes the provided audio stream.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="TranscribeTranscription(Stream,TranscribeDefinition,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> The <see cref="string"/> to use. Allowed values: "multipart/form-data". </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='TranscribeTranscription(RequestContent,string,RequestContext)']/*" />
        public virtual Response TranscribeTranscription(RequestContent content, string contentType, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SpeechClient.TranscribeTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTranscribeTranscriptionRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of transcriptions for the authenticated subscription. </summary>
        /// <param name="skip"> Number of datasets that will be skipped. </param>
        /// <param name="top"> Number of datasets that will be included after skipping. </param>
        /// <param name="filter">
        /// A filtering expression for selecting a subset of the available transcriptions.
        ///             - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.
        ///             - Operators:
        ///               - eq, ne are supported for all properties.
        ///               - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.
        ///               - and, or, not are supported.
        ///             - Example:
        ///               filter=createdDateTime gt 2022-02-01T11:00:00Z
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='GetTranscriptionsAsync(int?,int?,string,CancellationToken)']/*" />
        public virtual async Task<Response<PageableTranscription>> GetTranscriptionsAsync(int? skip = null, int? top = null, string filter = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetTranscriptionsAsync(skip, top, filter, context).ConfigureAwait(false);
            return Response.FromValue(PageableTranscription.FromResponse(response), response);
        }

        /// <summary> Gets a list of transcriptions for the authenticated subscription. </summary>
        /// <param name="skip"> Number of datasets that will be skipped. </param>
        /// <param name="top"> Number of datasets that will be included after skipping. </param>
        /// <param name="filter">
        /// A filtering expression for selecting a subset of the available transcriptions.
        ///             - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.
        ///             - Operators:
        ///               - eq, ne are supported for all properties.
        ///               - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.
        ///               - and, or, not are supported.
        ///             - Example:
        ///               filter=createdDateTime gt 2022-02-01T11:00:00Z
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='GetTranscriptions(int?,int?,string,CancellationToken)']/*" />
        public virtual Response<PageableTranscription> GetTranscriptions(int? skip = null, int? top = null, string filter = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetTranscriptions(skip, top, filter, context);
            return Response.FromValue(PageableTranscription.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets a list of transcriptions for the authenticated subscription.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTranscriptionsAsync(int?,int?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="skip"> Number of datasets that will be skipped. </param>
        /// <param name="top"> Number of datasets that will be included after skipping. </param>
        /// <param name="filter">
        /// A filtering expression for selecting a subset of the available transcriptions.
        ///             - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.
        ///             - Operators:
        ///               - eq, ne are supported for all properties.
        ///               - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.
        ///               - and, or, not are supported.
        ///             - Example:
        ///               filter=createdDateTime gt 2022-02-01T11:00:00Z
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='GetTranscriptionsAsync(int?,int?,string,RequestContext)']/*" />
        public virtual async Task<Response> GetTranscriptionsAsync(int? skip, int? top, string filter, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SpeechClient.GetTranscriptions");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTranscriptionsRequest(skip, top, filter, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a list of transcriptions for the authenticated subscription.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTranscriptions(int?,int?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="skip"> Number of datasets that will be skipped. </param>
        /// <param name="top"> Number of datasets that will be included after skipping. </param>
        /// <param name="filter">
        /// A filtering expression for selecting a subset of the available transcriptions.
        ///             - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.
        ///             - Operators:
        ///               - eq, ne are supported for all properties.
        ///               - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.
        ///               - and, or, not are supported.
        ///             - Example:
        ///               filter=createdDateTime gt 2022-02-01T11:00:00Z
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='GetTranscriptions(int?,int?,string,RequestContext)']/*" />
        public virtual Response GetTranscriptions(int? skip, int? top, string filter, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SpeechClient.GetTranscriptions");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTranscriptionsRequest(skip, top, filter, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the transcription identified by the given ID. </summary>
        /// <param name="id"> The identifier of the transcription. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='GetTranscriptionAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<Transcription>> GetTranscriptionAsync(string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetTranscriptionAsync(id, context).ConfigureAwait(false);
            return Response.FromValue(Transcription.FromResponse(response), response);
        }

        /// <summary> Gets the transcription identified by the given ID. </summary>
        /// <param name="id"> The identifier of the transcription. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='GetTranscription(string,CancellationToken)']/*" />
        public virtual Response<Transcription> GetTranscription(string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetTranscription(id, context);
            return Response.FromValue(Transcription.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets the transcription identified by the given ID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTranscriptionAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> The identifier of the transcription. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='GetTranscriptionAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetTranscriptionAsync(string id, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("SpeechClient.GetTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTranscriptionRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the transcription identified by the given ID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTranscription(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> The identifier of the transcription. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='GetTranscription(string,RequestContext)']/*" />
        public virtual Response GetTranscription(string id, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("SpeechClient.GetTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTranscriptionRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Updates the mutable details of the transcription identified by its ID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> The identifier of the transcription. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> The <see cref="ContentType"/> to use. Allowed values: "application/json" | "application/merge-patch+json". </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='PatchTranscriptionAsync(string,RequestContent,ContentType,RequestContext)']/*" />
        public virtual async Task<Response> PatchTranscriptionAsync(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SpeechClient.PatchTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchTranscriptionRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Updates the mutable details of the transcription identified by its ID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> The identifier of the transcription. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> The <see cref="ContentType"/> to use. Allowed values: "application/json" | "application/merge-patch+json". </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='PatchTranscription(string,RequestContent,ContentType,RequestContext)']/*" />
        public virtual Response PatchTranscription(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SpeechClient.PatchTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchTranscriptionRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes the specified transcription task.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> The identifier of the transcription. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='DeleteTranscriptionAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> DeleteTranscriptionAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("SpeechClient.DeleteTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTranscriptionRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes the specified transcription task.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"> The identifier of the transcription. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SpeechClient.xml" path="doc/members/member[@name='DeleteTranscription(string,RequestContext)']/*" />
        public virtual Response DeleteTranscription(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("SpeechClient.DeleteTranscription");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTranscriptionRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateSubmitTranscriptionRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/speechtotext", false);
            uri.AppendPath("/transcriptions:submit", false);
            if (_serviceApiVersionsQueryParameter != null)
            {
                uri.AppendQuery("api-version", _serviceApiVersionsQueryParameter.Value.ToSerialString(), true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateTranscribeTranscriptionRequest(RequestContent content, string contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/speechtotext", false);
            uri.AppendPath("/transcriptions:transcribe", false);
            if (_serviceApiVersionsQueryParameter != null)
            {
                uri.AppendQuery("api-version", _serviceApiVersionsQueryParameter.Value.ToSerialString(), true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", contentType);
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetTranscriptionsRequest(int? skip, int? top, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/speechtotext", false);
            uri.AppendPath("/transcriptions", false);
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (top != null)
            {
                uri.AppendQuery("top", top.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            if (_serviceApiVersionsQueryParameter != null)
            {
                uri.AppendQuery("api-version", _serviceApiVersionsQueryParameter.Value.ToSerialString(), true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTranscriptionRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/speechtotext", false);
            uri.AppendPath("/transcriptions/", false);
            uri.AppendPath(id, true);
            if (_serviceApiVersionsQueryParameter != null)
            {
                uri.AppendQuery("api-version", _serviceApiVersionsQueryParameter.Value.ToSerialString(), true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePatchTranscriptionRequest(string id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/speechtotext", false);
            uri.AppendPath("/transcriptions/", false);
            uri.AppendPath(id, true);
            if (_serviceApiVersionsQueryParameter != null)
            {
                uri.AppendQuery("api-version", _serviceApiVersionsQueryParameter.Value.ToSerialString(), true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteTranscriptionRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/speechtotext", false);
            uri.AppendPath("/transcriptions/", false);
            uri.AppendPath(id, true);
            if (_serviceApiVersionsQueryParameter != null)
            {
                uri.AppendQuery("api-version", _serviceApiVersionsQueryParameter.Value.ToSerialString(), true);
            }
            request.Uri = uri;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
