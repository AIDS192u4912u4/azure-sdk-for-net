// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Speech.Transcription
{
    /// <summary> The TranscriptionProperties. </summary>
    public partial class TranscriptionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TranscriptionProperties"/>. </summary>
        /// <param name="timeToLive"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="timeToLive"/> is null. </exception>
        public TranscriptionProperties(string timeToLive)
        {
            Argument.AssertNotNull(timeToLive, nameof(timeToLive));

            Channels = new ChangeTrackingList<int>();
            TimeToLive = timeToLive;
        }

        /// <summary> Initializes a new instance of <see cref="TranscriptionProperties"/>. </summary>
        /// <param name="wordLevelTimestampsEnabled"></param>
        /// <param name="displayFormWordLevelTimestampsEnabled"></param>
        /// <param name="duration"></param>
        /// <param name="channels"></param>
        /// <param name="destinationContainerUrl"></param>
        /// <param name="punctuationMode"></param>
        /// <param name="profanityFilterMode"></param>
        /// <param name="timeToLive"></param>
        /// <param name="error"></param>
        /// <param name="diarization"></param>
        /// <param name="languageIdentification"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TranscriptionProperties(bool? wordLevelTimestampsEnabled, bool? displayFormWordLevelTimestampsEnabled, string duration, IList<int> channels, Uri destinationContainerUrl, PunctuationMode? punctuationMode, ProfanityFilterMode? profanityFilterMode, string timeToLive, EntityError error, DiarizationProperties diarization, LanguageIdentificationProperties languageIdentification, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            WordLevelTimestampsEnabled = wordLevelTimestampsEnabled;
            DisplayFormWordLevelTimestampsEnabled = displayFormWordLevelTimestampsEnabled;
            Duration = duration;
            Channels = channels;
            DestinationContainerUrl = destinationContainerUrl;
            PunctuationMode = punctuationMode;
            ProfanityFilterMode = profanityFilterMode;
            TimeToLive = timeToLive;
            Error = error;
            Diarization = diarization;
            LanguageIdentification = languageIdentification;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TranscriptionProperties"/> for deserialization. </summary>
        internal TranscriptionProperties()
        {
        }

        /// <summary> Gets or sets the word level timestamps enabled. </summary>
        public bool? WordLevelTimestampsEnabled { get; set; }
        /// <summary> Gets or sets the display form word level timestamps enabled. </summary>
        public bool? DisplayFormWordLevelTimestampsEnabled { get; set; }
        /// <summary> Gets the duration. </summary>
        public string Duration { get; }
        /// <summary> Gets the channels. </summary>
        public IList<int> Channels { get; }
        /// <summary> Gets or sets the destination container url. </summary>
        public Uri DestinationContainerUrl { get; set; }
        /// <summary> Gets or sets the punctuation mode. </summary>
        public PunctuationMode? PunctuationMode { get; set; }
        /// <summary> Gets or sets the profanity filter mode. </summary>
        public ProfanityFilterMode? ProfanityFilterMode { get; set; }
        /// <summary> Gets or sets the time to live. </summary>
        public string TimeToLive { get; set; }
        /// <summary> Gets or sets the error. </summary>
        public EntityError Error { get; set; }
        /// <summary> Gets or sets the diarization. </summary>
        public DiarizationProperties Diarization { get; set; }
        /// <summary> Gets or sets the language identification. </summary>
        public LanguageIdentificationProperties LanguageIdentification { get; set; }
    }
}
