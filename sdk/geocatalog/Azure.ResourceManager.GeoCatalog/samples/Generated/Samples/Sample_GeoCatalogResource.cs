// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.GeoCatalog.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.GeoCatalog.Samples
{
    public partial class Sample_GeoCatalogResource
    {
        // GeoCatalogs_ListBySubscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetGeoCatalogs_GeoCatalogsListBySubscription()
        {
            // Generated from example definition: specification/orbitalplanetarycomputer/resource-manager/Microsoft.Orbital/preview/2024-01-31-preview/examples/GeoCatalogs_ListBySubscription.json
            // this example is just showing the usage of "GeoCatalogs_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "CD9B6CDF-DCF0-4DCA-AB19-82BE07B74704";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (GeoCatalogResource item in subscriptionResource.GetGeoCatalogsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                GeoCatalogData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // GeoCatalogs_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GeoCatalogsGet()
        {
            // Generated from example definition: specification/orbitalplanetarycomputer/resource-manager/Microsoft.Orbital/preview/2024-01-31-preview/examples/GeoCatalogs_Get.json
            // this example is just showing the usage of "GeoCatalogs_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this GeoCatalogResource created on azure
            // for more information of creating GeoCatalogResource, please refer to the document of GeoCatalogResource
            string subscriptionId = "CD9B6CDF-DCF0-4DCA-AB19-82BE07B74704";
            string resourceGroupName = "rgaopc";
            string catalogName = "MyCatalog";
            ResourceIdentifier geoCatalogResourceId = GeoCatalogResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, catalogName);
            GeoCatalogResource geoCatalog = client.GetGeoCatalogResource(geoCatalogResourceId);

            // invoke the operation
            GeoCatalogResource result = await geoCatalog.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            GeoCatalogData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GeoCatalogs_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_GeoCatalogsUpdate()
        {
            // Generated from example definition: specification/orbitalplanetarycomputer/resource-manager/Microsoft.Orbital/preview/2024-01-31-preview/examples/GeoCatalogs_Update.json
            // this example is just showing the usage of "GeoCatalogs_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this GeoCatalogResource created on azure
            // for more information of creating GeoCatalogResource, please refer to the document of GeoCatalogResource
            string subscriptionId = "CD9B6CDF-DCF0-4DCA-AB19-82BE07B74704";
            string resourceGroupName = "rgaopc";
            string catalogName = "MyCatalog";
            ResourceIdentifier geoCatalogResourceId = GeoCatalogResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, catalogName);
            GeoCatalogResource geoCatalog = client.GetGeoCatalogResource(geoCatalogResourceId);

            // invoke the operation
            GeoCatalogPatch patch = new GeoCatalogPatch()
            {
                Tags =
{
["key1783"] = "fj",
},
            };
            GeoCatalogResource result = await geoCatalog.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            GeoCatalogData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GeoCatalogs_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_GeoCatalogsDelete()
        {
            // Generated from example definition: specification/orbitalplanetarycomputer/resource-manager/Microsoft.Orbital/preview/2024-01-31-preview/examples/GeoCatalogs_Delete.json
            // this example is just showing the usage of "GeoCatalogs_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this GeoCatalogResource created on azure
            // for more information of creating GeoCatalogResource, please refer to the document of GeoCatalogResource
            string subscriptionId = "CD9B6CDF-DCF0-4DCA-AB19-82BE07B74704";
            string resourceGroupName = "rgaopc";
            string catalogName = "MyCatalog";
            ResourceIdentifier geoCatalogResourceId = GeoCatalogResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, catalogName);
            GeoCatalogResource geoCatalog = client.GetGeoCatalogResource(geoCatalogResourceId);

            // invoke the operation
            await geoCatalog.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
