// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    public partial class IPv4 : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("addressRange"u8);
            writer.WriteObjectValue(AddressRange);
            writer.WritePropertyName("subnetMask"u8);
            writer.WriteStringValue(SubnetMask);
            writer.WritePropertyName("defaultGateway"u8);
            writer.WriteStringValue(DefaultGateway);
            writer.WritePropertyName("dnsServers"u8);
            writer.WriteStartArray();
            foreach (var item in DnsServers)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("vLanId"u8);
            writer.WriteNumberValue(VLanId);
            writer.WriteEndObject();
        }

        internal static IPv4 DeserializeIPv4(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IPv4AddressRange addressRange = default;
            Optional<string> ipAddress = default;
            string subnetMask = default;
            string defaultGateway = default;
            IList<string> dnsServers = default;
            int vLanId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("addressRange"u8))
                {
                    addressRange = IPv4AddressRange.DeserializeIPv4AddressRange(property.Value);
                    continue;
                }
                if (property.NameEquals("ipAddress"u8))
                {
                    ipAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subnetMask"u8))
                {
                    subnetMask = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("defaultGateway"u8))
                {
                    defaultGateway = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dnsServers"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dnsServers = array;
                    continue;
                }
                if (property.NameEquals("vLanId"u8))
                {
                    vLanId = property.Value.GetInt32();
                    continue;
                }
            }
            return new IPv4(addressRange, ipAddress.Value, subnetMask, defaultGateway, dnsServers, vLanId);
        }
    }
}
