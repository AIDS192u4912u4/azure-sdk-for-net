// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.EdgeOrder.Models
{
    /// <summary> Represents Ipv4 configuration. </summary>
    public partial class IPv4
    {
        /// <summary> Initializes a new instance of IPv4. </summary>
        /// <param name="addressRange"> Address range for Ipv4. </param>
        /// <param name="subnetMask"> Subnet mask for Ipv4. </param>
        /// <param name="defaultGateway"> Default gateway for Ipv4. </param>
        /// <param name="dnsServers"> DNS Servers IPs for Ipv4. </param>
        /// <param name="vLanId"> VLAN Id for the network interface. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="addressRange"/>, <paramref name="subnetMask"/>, <paramref name="defaultGateway"/> or <paramref name="dnsServers"/> is null. </exception>
        public IPv4(IPv4AddressRange addressRange, string subnetMask, string defaultGateway, IEnumerable<string> dnsServers, int vLanId)
        {
            Argument.AssertNotNull(addressRange, nameof(addressRange));
            Argument.AssertNotNull(subnetMask, nameof(subnetMask));
            Argument.AssertNotNull(defaultGateway, nameof(defaultGateway));
            Argument.AssertNotNull(dnsServers, nameof(dnsServers));

            AddressRange = addressRange;
            SubnetMask = subnetMask;
            DefaultGateway = defaultGateway;
            DnsServers = dnsServers.ToList();
            VLanId = vLanId;
        }

        /// <summary> Initializes a new instance of IPv4. </summary>
        /// <param name="addressRange"> Address range for Ipv4. </param>
        /// <param name="ipAddress"> IP Address. </param>
        /// <param name="subnetMask"> Subnet mask for Ipv4. </param>
        /// <param name="defaultGateway"> Default gateway for Ipv4. </param>
        /// <param name="dnsServers"> DNS Servers IPs for Ipv4. </param>
        /// <param name="vLanId"> VLAN Id for the network interface. </param>
        internal IPv4(IPv4AddressRange addressRange, string ipAddress, string subnetMask, string defaultGateway, IList<string> dnsServers, int vLanId)
        {
            AddressRange = addressRange;
            IPAddress = ipAddress;
            SubnetMask = subnetMask;
            DefaultGateway = defaultGateway;
            DnsServers = dnsServers;
            VLanId = vLanId;
        }

        /// <summary> Address range for Ipv4. </summary>
        public IPv4AddressRange AddressRange { get; set; }
        /// <summary> IP Address. </summary>
        public string IPAddress { get; }
        /// <summary> Subnet mask for Ipv4. </summary>
        public string SubnetMask { get; set; }
        /// <summary> Default gateway for Ipv4. </summary>
        public string DefaultGateway { get; set; }
        /// <summary> DNS Servers IPs for Ipv4. </summary>
        public IList<string> DnsServers { get; }
        /// <summary> VLAN Id for the network interface. </summary>
        public int VLanId { get; set; }
    }
}
