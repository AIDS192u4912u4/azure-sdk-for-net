// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SustainabilityServices.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.SustainabilityServices.Samples
{
    public partial class Sample_CalculationResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_CalculationsGet()
        {
            // Generated from example definition: 2024-10-01-preview/Calculations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "CalculationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CalculationResource created on azure
            // for more information of creating CalculationResource, please refer to the document of CalculationResource
            string subscriptionId = "1E7EEF18-39BE-4D97-8CF9-DB0BF6E57F83";
            string resourceGroupName = "rgopenapi";
            string calculationResourceName = "calcresource";
            ResourceIdentifier calculationResourceId = CalculationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, calculationResourceName);
            CalculationResource calculationResource = client.GetCalculationResource(calculationResourceId);

            // invoke the operation
            CalculationResource result = await calculationResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CalculationResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_CalculationsDelete()
        {
            // Generated from example definition: 2024-10-01-preview/Calculations_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "CalculationResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CalculationResource created on azure
            // for more information of creating CalculationResource, please refer to the document of CalculationResource
            string subscriptionId = "1E7EEF18-39BE-4D97-8CF9-DB0BF6E57F83";
            string resourceGroupName = "rgopenapi";
            string calculationResourceName = "calcresource";
            ResourceIdentifier calculationResourceId = CalculationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, calculationResourceName);
            CalculationResource calculationResource = client.GetCalculationResource(calculationResourceId);

            // invoke the operation
            await calculationResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_CalculationsUpdate()
        {
            // Generated from example definition: 2024-10-01-preview/Calculations_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "CalculationResource_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CalculationResource created on azure
            // for more information of creating CalculationResource, please refer to the document of CalculationResource
            string subscriptionId = "ABFDA5D8-8169-4AFB-B397-6A38438D0F2A";
            string resourceGroupName = "rgopenapi";
            string calculationResourceName = "calcresource";
            ResourceIdentifier calculationResourceId = CalculationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, calculationResourceName);
            CalculationResource calculationResource = client.GetCalculationResource(calculationResourceId);

            // invoke the operation
            CalculationResourcePatch patch = new CalculationResourcePatch
            {
                Identity = new ManagedServiceIdentity("UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("key940")] = new UserAssignedIdentity()
},
                },
                Sku = new SustainabilityServicesSku("fwxxzq")
                {
                    Tier = SustainabilityServicesSkuTier.Free,
                    Size = "qlnfnc",
                    Family = "yqmlw",
                    Capacity = 17,
                },
                Tags =
{
["key9463"] = "pruwo"
},
                Properties = new CalculationResourceUpdateProperties
                {
                    Version = "wsvfjsockffpingjh",
                    CachingType = "enlvtzyjnthsllyddxyfxqhzmi",
                    EnablePublicEndpoint = true,
                    DenyAssignmentExclusions = { new DenyAssignmentExclusion("uceknxmddsseietz", "uyymckzmrwdafrdxkxh") },
                },
            };
            ArmOperation<CalculationResource> lro = await calculationResource.UpdateAsync(WaitUntil.Completed, patch);
            CalculationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CalculationResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
