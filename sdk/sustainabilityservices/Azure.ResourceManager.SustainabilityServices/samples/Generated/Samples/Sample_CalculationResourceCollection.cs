// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.SustainabilityServices.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.SustainabilityServices.Samples
{
    public partial class Sample_CalculationResourceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CalculationsCreateOrUpdate()
        {
            // Generated from example definition: 2024-10-01-preview/Calculations_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "CalculationResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "ABFDA5D8-8169-4AFB-B397-6A38438D0F2A";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CalculationResource
            CalculationResourceCollection collection = resourceGroupResource.GetCalculationResources();

            // invoke the operation
            string calculationResourceName = "calcresource";
            CalculationResourceData data = new CalculationResourceData(new AzureLocation("igtciemtuzxgmrvrezdwuifayylzrm"))
            {
                Properties = new CalculationResourceProperties("cBaEC5DF-CEaB-Ddae-ecbD-1Afabbd6DAe3")
                {
                    Version = "grnmmplpqogaktyegjzizcolvcs",
                    DdosPlan = "tsjz",
                    CachingType = "lluexznlluqfslozsciebln",
                    EnablePublicEndpoint = true,
                    DenyAssignmentExclusions = { new DenyAssignmentExclusion("uceknxmddsseietz", "uyymckzmrwdafrdxkxh") },
                },
                Identity = new ManagedServiceIdentity("UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("key3930")] = new UserAssignedIdentity()
},
                },
                Sku = new SustainabilityServicesSku("pli")
                {
                    Tier = SustainabilityServicesSkuTier.Free,
                    Size = "degtbjgzzumqegkzjnxtpiagwuwbcd",
                    Family = "fondoqpmgfpyn",
                    Capacity = 8,
                },
                Tags =
{
["key8990"] = "bedmrhalvpxaanzsfoxwkep"
},
            };
            ArmOperation<CalculationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, calculationResourceName, data);
            CalculationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CalculationResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_CalculationsGet()
        {
            // Generated from example definition: 2024-10-01-preview/Calculations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "CalculationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "1E7EEF18-39BE-4D97-8CF9-DB0BF6E57F83";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CalculationResource
            CalculationResourceCollection collection = resourceGroupResource.GetCalculationResources();

            // invoke the operation
            string calculationResourceName = "calcresource";
            CalculationResource result = await collection.GetAsync(calculationResourceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CalculationResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_CalculationsListByResourceGroup()
        {
            // Generated from example definition: 2024-10-01-preview/Calculations_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "CalculationResource_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "ABFDA5D8-8169-4AFB-B397-6A38438D0F2A";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CalculationResource
            CalculationResourceCollection collection = resourceGroupResource.GetCalculationResources();

            // invoke the operation and iterate over the result
            await foreach (CalculationResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                CalculationResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_CalculationsGet()
        {
            // Generated from example definition: 2024-10-01-preview/Calculations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "CalculationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "1E7EEF18-39BE-4D97-8CF9-DB0BF6E57F83";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CalculationResource
            CalculationResourceCollection collection = resourceGroupResource.GetCalculationResources();

            // invoke the operation
            string calculationResourceName = "calcresource";
            bool result = await collection.ExistsAsync(calculationResourceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_CalculationsGet()
        {
            // Generated from example definition: 2024-10-01-preview/Calculations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "CalculationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "1E7EEF18-39BE-4D97-8CF9-DB0BF6E57F83";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CalculationResource
            CalculationResourceCollection collection = resourceGroupResource.GetCalculationResources();

            // invoke the operation
            string calculationResourceName = "calcresource";
            NullableResponse<CalculationResource> response = await collection.GetIfExistsAsync(calculationResourceName);
            CalculationResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                CalculationResourceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
