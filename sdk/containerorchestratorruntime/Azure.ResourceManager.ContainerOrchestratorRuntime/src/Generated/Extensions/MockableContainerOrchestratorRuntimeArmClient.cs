// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.ContainerOrchestratorRuntime.Mocking
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public partial class MockableContainerOrchestratorRuntimeArmClient : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableContainerOrchestratorRuntimeArmClient"/> class for mocking. </summary>
        protected MockableContainerOrchestratorRuntimeArmClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableContainerOrchestratorRuntimeArmClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableContainerOrchestratorRuntimeArmClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        internal MockableContainerOrchestratorRuntimeArmClient(ArmClient client) : this(client, ResourceIdentifier.Root)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of BgpPeerResources in the ArmClient. </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of BgpPeerResources and their operations over a BgpPeerResource. </returns>
        public virtual BgpPeerCollection GetBgpPeers(ResourceIdentifier scope)
        {
            return new BgpPeerCollection(Client, scope);
        }

        /// <summary>
        /// Get a BgpPeer
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers/{bgpPeerName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BgpPeers_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BgpPeerResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="bgpPeerName"> The name of the BgpPeer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="bgpPeerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="bgpPeerName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<BgpPeerResource>> GetBgpPeerAsync(ResourceIdentifier scope, string bgpPeerName, CancellationToken cancellationToken = default)
        {
            return await GetBgpPeers(scope).GetAsync(bgpPeerName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a BgpPeer
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers/{bgpPeerName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BgpPeers_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BgpPeerResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="bgpPeerName"> The name of the BgpPeer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="bgpPeerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="bgpPeerName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<BgpPeerResource> GetBgpPeer(ResourceIdentifier scope, string bgpPeerName, CancellationToken cancellationToken = default)
        {
            return GetBgpPeers(scope).Get(bgpPeerName, cancellationToken);
        }

        /// <summary> Gets a collection of LoadBalancerResources in the ArmClient. </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of LoadBalancerResources and their operations over a LoadBalancerResource. </returns>
        public virtual LoadBalancerCollection GetLoadBalancers(ResourceIdentifier scope)
        {
            return new LoadBalancerCollection(Client, scope);
        }

        /// <summary>
        /// Get a LoadBalancer
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.KubernetesRuntime/loadBalancers/{loadBalancerName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LoadBalancers_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LoadBalancerResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="loadBalancerName"> The name of the LoadBalancer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="loadBalancerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="loadBalancerName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<LoadBalancerResource>> GetLoadBalancerAsync(ResourceIdentifier scope, string loadBalancerName, CancellationToken cancellationToken = default)
        {
            return await GetLoadBalancers(scope).GetAsync(loadBalancerName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a LoadBalancer
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.KubernetesRuntime/loadBalancers/{loadBalancerName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LoadBalancers_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LoadBalancerResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="loadBalancerName"> The name of the LoadBalancer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="loadBalancerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="loadBalancerName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<LoadBalancerResource> GetLoadBalancer(ResourceIdentifier scope, string loadBalancerName, CancellationToken cancellationToken = default)
        {
            return GetLoadBalancers(scope).Get(loadBalancerName, cancellationToken);
        }

        /// <summary> Gets a collection of ServiceResources in the ArmClient. </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of ServiceResources and their operations over a ServiceResource. </returns>
        public virtual ServiceResourceCollection GetServiceResources(ResourceIdentifier scope)
        {
            return new ServiceResourceCollection(Client, scope);
        }

        /// <summary>
        /// Get a ServiceResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.KubernetesRuntime/services/{serviceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Services_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ServiceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="serviceName"> The name of the the service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serviceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ServiceResource>> GetServiceResourceAsync(ResourceIdentifier scope, string serviceName, CancellationToken cancellationToken = default)
        {
            return await GetServiceResources(scope).GetAsync(serviceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a ServiceResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.KubernetesRuntime/services/{serviceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Services_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ServiceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="serviceName"> The name of the the service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serviceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<ServiceResource> GetServiceResource(ResourceIdentifier scope, string serviceName, CancellationToken cancellationToken = default)
        {
            return GetServiceResources(scope).Get(serviceName, cancellationToken);
        }

        /// <summary> Gets a collection of StorageClassResources in the ArmClient. </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of StorageClassResources and their operations over a StorageClassResource. </returns>
        public virtual StorageClassResourceCollection GetStorageClassResources(ResourceIdentifier scope)
        {
            return new StorageClassResourceCollection(Client, scope);
        }

        /// <summary>
        /// Get a StorageClassResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StorageClass_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StorageClassResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="storageClassName"> The name of the the storage class. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageClassName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="storageClassName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<StorageClassResource>> GetStorageClassResourceAsync(ResourceIdentifier scope, string storageClassName, CancellationToken cancellationToken = default)
        {
            return await GetStorageClassResources(scope).GetAsync(storageClassName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a StorageClassResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StorageClass_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StorageClassResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="storageClassName"> The name of the the storage class. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageClassName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="storageClassName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<StorageClassResource> GetStorageClassResource(ResourceIdentifier scope, string storageClassName, CancellationToken cancellationToken = default)
        {
            return GetStorageClassResources(scope).Get(storageClassName, cancellationToken);
        }

        /// <summary>
        /// Gets an object representing a <see cref="BgpPeerResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="BgpPeerResource.CreateResourceIdentifier" /> to create a <see cref="BgpPeerResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="BgpPeerResource"/> object. </returns>
        public virtual BgpPeerResource GetBgpPeerResource(ResourceIdentifier id)
        {
            BgpPeerResource.ValidateResourceId(id);
            return new BgpPeerResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="LoadBalancerResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LoadBalancerResource.CreateResourceIdentifier" /> to create a <see cref="LoadBalancerResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LoadBalancerResource"/> object. </returns>
        public virtual LoadBalancerResource GetLoadBalancerResource(ResourceIdentifier id)
        {
            LoadBalancerResource.ValidateResourceId(id);
            return new LoadBalancerResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="ServiceResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceResource.CreateResourceIdentifier" /> to create a <see cref="ServiceResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceResource"/> object. </returns>
        public virtual ServiceResource GetServiceResource(ResourceIdentifier id)
        {
            ServiceResource.ValidateResourceId(id);
            return new ServiceResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="StorageClassResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="StorageClassResource.CreateResourceIdentifier" /> to create a <see cref="StorageClassResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="StorageClassResource"/> object. </returns>
        public virtual StorageClassResource GetStorageClassResource(ResourceIdentifier id)
        {
            StorageClassResource.ValidateResourceId(id);
            return new StorageClassResource(Client, id);
        }
    }
}
