// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.DevCenter.Models
{
    /// <summary> The type of Dev Box operation. </summary>
    internal readonly partial struct DevBoxOperationKind : IEquatable<DevBoxOperationKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DevBoxOperationKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DevBoxOperationKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StartValue = "Start";
        private const string StopValue = "Stop";
        private const string RestartValue = "Restart";
        private const string RepairValue = "Repair";

        /// <summary> The operation represents a Dev Box start. </summary>
        public static DevBoxOperationKind Start { get; } = new DevBoxOperationKind(StartValue);
        /// <summary> The operation represents a Dev Box stop. </summary>
        public static DevBoxOperationKind Stop { get; } = new DevBoxOperationKind(StopValue);
        /// <summary> The operation represents a Dev Box restart. </summary>
        public static DevBoxOperationKind Restart { get; } = new DevBoxOperationKind(RestartValue);
        /// <summary> The operation represents a Dev Box repair. </summary>
        public static DevBoxOperationKind Repair { get; } = new DevBoxOperationKind(RepairValue);
        /// <summary> Determines if two <see cref="DevBoxOperationKind"/> values are the same. </summary>
        public static bool operator ==(DevBoxOperationKind left, DevBoxOperationKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DevBoxOperationKind"/> values are not the same. </summary>
        public static bool operator !=(DevBoxOperationKind left, DevBoxOperationKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DevBoxOperationKind"/>. </summary>
        public static implicit operator DevBoxOperationKind(string value) => new DevBoxOperationKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DevBoxOperationKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DevBoxOperationKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
