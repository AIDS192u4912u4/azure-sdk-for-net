// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.DevCenter.Models
{
    /// <summary> The action taken during a repair operation. </summary>
    public readonly partial struct DevBoxRepairOutcome : IEquatable<DevBoxRepairOutcome>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DevBoxRepairOutcome"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DevBoxRepairOutcome(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FixAppliedValue = "FixApplied";
        private const string IssuesDetectedValue = "IssuesDetected";
        private const string NoIssuesDetectedValue = "NoIssuesDetected";

        /// <summary> A fix for an issue was automatically applied to the Dev Box. </summary>
        public static DevBoxRepairOutcome FixApplied { get; } = new DevBoxRepairOutcome(FixAppliedValue);
        /// <summary> One or more issues was detected on the Dev Box, but they could not be fixed automatically. </summary>
        public static DevBoxRepairOutcome IssuesDetected { get; } = new DevBoxRepairOutcome(IssuesDetectedValue);
        /// <summary> The service did not identify any issues on the Dev Box. </summary>
        public static DevBoxRepairOutcome NoIssuesDetected { get; } = new DevBoxRepairOutcome(NoIssuesDetectedValue);
        /// <summary> Determines if two <see cref="DevBoxRepairOutcome"/> values are the same. </summary>
        public static bool operator ==(DevBoxRepairOutcome left, DevBoxRepairOutcome right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DevBoxRepairOutcome"/> values are not the same. </summary>
        public static bool operator !=(DevBoxRepairOutcome left, DevBoxRepairOutcome right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DevBoxRepairOutcome"/>. </summary>
        public static implicit operator DevBoxRepairOutcome(string value) => new DevBoxRepairOutcome(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DevBoxRepairOutcome other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DevBoxRepairOutcome other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
