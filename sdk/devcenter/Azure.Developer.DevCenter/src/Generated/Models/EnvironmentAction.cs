// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.DevCenter.Models
{
    /// <summary> An upcoming Environment Action. </summary>
    public partial class EnvironmentAction
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EnvironmentAction"/>. </summary>
        /// <param name="actionType"> The action that will be taken. </param>
        internal EnvironmentAction(EnvironmentActionType actionType)
        {
            ActionType = actionType;
        }

        /// <summary> Initializes a new instance of <see cref="EnvironmentAction"/>. </summary>
        /// <param name="name"> Uniquely identifies the action. </param>
        /// <param name="uri"> Uri of the action resource. </param>
        /// <param name="actionType"> The action that will be taken. </param>
        /// <param name="next"> Details about the next run of this action. </param>
        /// <param name="lastModifiedBy"> Object Id of the user who last modified the action. </param>
        /// <param name="lastModifiedAt"> Time the object was last modified. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EnvironmentAction(string name, Uri uri, EnvironmentActionType actionType, EnvironmentNextAction next, Guid? lastModifiedBy, DateTimeOffset? lastModifiedAt, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Uri = uri;
            ActionType = actionType;
            Next = next;
            LastModifiedBy = lastModifiedBy;
            LastModifiedAt = lastModifiedAt;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EnvironmentAction"/> for deserialization. </summary>
        internal EnvironmentAction()
        {
        }

        /// <summary> Uniquely identifies the action. </summary>
        public string Name { get; }
        /// <summary> Uri of the action resource. </summary>
        public Uri Uri { get; }
        /// <summary> The action that will be taken. </summary>
        public EnvironmentActionType ActionType { get; }
        /// <summary> Details about the next run of this action. </summary>
        public EnvironmentNextAction Next { get; }
        /// <summary> Object Id of the user who last modified the action. </summary>
        public Guid? LastModifiedBy { get; }
        /// <summary> Time the object was last modified. </summary>
        public DateTimeOffset? LastModifiedAt { get; }
    }
}
