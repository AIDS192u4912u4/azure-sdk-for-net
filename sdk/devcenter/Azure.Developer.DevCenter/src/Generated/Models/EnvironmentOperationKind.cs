// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.DevCenter.Models
{
    /// <summary> The type of environment operation. </summary>
    internal readonly partial struct EnvironmentOperationKind : IEquatable<EnvironmentOperationKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EnvironmentOperationKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnvironmentOperationKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DeployValue = "Deploy";
        private const string DeleteValue = "Delete";

        /// <summary> The operation represents a deployment. </summary>
        public static EnvironmentOperationKind Deploy { get; } = new EnvironmentOperationKind(DeployValue);
        /// <summary> The operation represents a delete. </summary>
        public static EnvironmentOperationKind Delete { get; } = new EnvironmentOperationKind(DeleteValue);
        /// <summary> Determines if two <see cref="EnvironmentOperationKind"/> values are the same. </summary>
        public static bool operator ==(EnvironmentOperationKind left, EnvironmentOperationKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnvironmentOperationKind"/> values are not the same. </summary>
        public static bool operator !=(EnvironmentOperationKind left, EnvironmentOperationKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnvironmentOperationKind"/>. </summary>
        public static implicit operator EnvironmentOperationKind(string value) => new EnvironmentOperationKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnvironmentOperationKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnvironmentOperationKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
