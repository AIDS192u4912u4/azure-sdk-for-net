// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Developer.DevCenter.Models;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.DevCenter.Samples
{
    public partial class Samples_DeploymentEnvironmentsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Environment_GetEnvironment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironment("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Environment_GetEnvironment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentAsync("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Environment_GetEnvironment_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<DevCenterEnvironment> response = client.GetEnvironment("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Environment_GetEnvironment_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<DevCenterEnvironment> response = await client.GetEnvironmentAsync("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Environment_GetEnvironment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironment("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("expirationDate").ToString());
            Console.WriteLine(result.GetProperty("parameters").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Environment_GetEnvironment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentAsync("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("expirationDate").ToString());
            Console.WriteLine(result.GetProperty("parameters").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Environment_GetEnvironment_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<DevCenterEnvironment> response = client.GetEnvironment("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Environment_GetEnvironment_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<DevCenterEnvironment> response = await client.GetEnvironmentAsync("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_PatchEnvironment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Response response = client.PatchEnvironment("<projectName>", "<userId>", "<environmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_PatchEnvironment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Response response = await client.PatchEnvironmentAsync("<projectName>", "<userId>", "<environmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_PatchEnvironment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                expirationDate = "2022-05-10T14:57:31.2311892-04:00",
                parameters = new
                {
                    key = new object(),
                },
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Response response = client.PatchEnvironment("<projectName>", "<userId>", "<environmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("expirationDate").ToString());
            Console.WriteLine(result.GetProperty("parameters").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_PatchEnvironment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                expirationDate = "2022-05-10T14:57:31.2311892-04:00",
                parameters = new
                {
                    key = new object(),
                },
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Response response = await client.PatchEnvironmentAsync("<projectName>", "<userId>", "<environmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("expirationDate").ToString());
            Console.WriteLine(result.GetProperty("parameters").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetOutputs_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetOutputs("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetOutputs_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetOutputsAsync("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetOutputs_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentOutputs> response = client.GetOutputs("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetOutputs_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentOutputs> response = await client.GetOutputsAsync("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetOutputs_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetOutputs("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").GetProperty("sensitive").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetOutputs_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetOutputsAsync("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").GetProperty("sensitive").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetOutputs_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentOutputs> response = client.GetOutputs("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetOutputs_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentOutputs> response = await client.GetOutputsAsync("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentOperation_GetOperation_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetOperation("<projectName>", "<userId>", "<environmentName>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentOperation_GetOperation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetOperationAsync("<projectName>", "<userId>", "<environmentName>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentOperation_GetOperation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentOperation> response = client.GetOperation("<projectName>", "<userId>", "<environmentName>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentOperation_GetOperation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentOperation> response = await client.GetOperationAsync("<projectName>", "<userId>", "<environmentName>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentOperation_GetOperation_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetOperation("<projectName>", "<userId>", "<environmentName>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdByObjectId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("environmentParameters").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentOperation_GetOperation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetOperationAsync("<projectName>", "<userId>", "<environmentName>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdByObjectId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("environmentParameters").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentOperation_GetOperation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentOperation> response = client.GetOperation("<projectName>", "<userId>", "<environmentName>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentOperation_GetOperation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentOperation> response = await client.GetOperationAsync("<projectName>", "<userId>", "<environmentName>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetLogsByOperation_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetLogsByOperation("<projectName>", "<userId>", "<environmentName>", "<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetLogsByOperation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetLogsByOperationAsync("<projectName>", "<userId>", "<environmentName>", "<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetLogsByOperation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<string> response = client.GetLogsByOperation("<projectName>", "<userId>", "<environmentName>", "<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetLogsByOperation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<string> response = await client.GetLogsByOperationAsync("<projectName>", "<userId>", "<environmentName>", "<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetLogsByOperation_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetLogsByOperation("<projectName>", "<userId>", "<environmentName>", "<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetLogsByOperation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetLogsByOperationAsync("<projectName>", "<userId>", "<environmentName>", "<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetLogsByOperation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<string> response = client.GetLogsByOperation("<projectName>", "<userId>", "<environmentName>", "<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetLogsByOperation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<string> response = await client.GetLogsByOperationAsync("<projectName>", "<userId>", "<environmentName>", "<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentAction_GetAction_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetAction("<projectName>", "<userId>", "<environmentName>", "<actionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentAction_GetAction_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetActionAsync("<projectName>", "<userId>", "<environmentName>", "<actionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentAction_GetAction_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentAction> response = client.GetAction("<projectName>", "<userId>", "<environmentName>", "<actionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentAction_GetAction_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentAction> response = await client.GetActionAsync("<projectName>", "<userId>", "<environmentName>", "<actionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentAction_GetAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetAction("<projectName>", "<userId>", "<environmentName>", "<actionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentAction_GetAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetActionAsync("<projectName>", "<userId>", "<environmentName>", "<actionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentAction_GetAction_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentAction> response = client.GetAction("<projectName>", "<userId>", "<environmentName>", "<actionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentAction_GetAction_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentAction> response = await client.GetActionAsync("<projectName>", "<userId>", "<environmentName>", "<actionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_SkipAction_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.SkipAction("<projectName>", "<userId>", "<environmentName>", "<actionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_SkipAction_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.SkipActionAsync("<projectName>", "<userId>", "<environmentName>", "<actionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_SkipAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.SkipAction("<projectName>", "<userId>", "<environmentName>", "<actionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_SkipAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.SkipActionAsync("<projectName>", "<userId>", "<environmentName>", "<actionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_DelayAction_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.DelayAction("<projectName>", "<userId>", "<environmentName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_DelayAction_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.DelayActionAsync("<projectName>", "<userId>", "<environmentName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_DelayAction_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentAction> response = client.DelayAction("<projectName>", "<userId>", "<environmentName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_DelayAction_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentAction> response = await client.DelayActionAsync("<projectName>", "<userId>", "<environmentName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_DelayAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.DelayAction("<projectName>", "<userId>", "<environmentName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_DelayAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.DelayActionAsync("<projectName>", "<userId>", "<environmentName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_DelayAction_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentAction> response = client.DelayAction("<projectName>", "<userId>", "<environmentName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_DelayAction_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentAction> response = await client.DelayActionAsync("<projectName>", "<userId>", "<environmentName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Catalog_GetCatalog_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetCatalog("<projectName>", "<catalogName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Catalog_GetCatalog_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetCatalogAsync("<projectName>", "<catalogName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Catalog_GetCatalog_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<DevCenterCatalog> response = client.GetCatalog("<projectName>", "<catalogName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Catalog_GetCatalog_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<DevCenterCatalog> response = await client.GetCatalogAsync("<projectName>", "<catalogName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Catalog_GetCatalog_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetCatalog("<projectName>", "<catalogName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Catalog_GetCatalog_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetCatalogAsync("<projectName>", "<catalogName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Catalog_GetCatalog_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<DevCenterCatalog> response = client.GetCatalog("<projectName>", "<catalogName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Catalog_GetCatalog_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<DevCenterCatalog> response = await client.GetCatalogAsync("<projectName>", "<catalogName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentDefinition_GetEnvironmentDefinition_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironmentDefinition("<projectName>", "<catalogName>", "<definitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentDefinition_GetEnvironmentDefinition_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentDefinitionAsync("<projectName>", "<catalogName>", "<definitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentDefinition_GetEnvironmentDefinition_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentDefinition> response = client.GetEnvironmentDefinition("<projectName>", "<catalogName>", "<definitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentDefinition_GetEnvironmentDefinition_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentDefinition> response = await client.GetEnvironmentDefinitionAsync("<projectName>", "<catalogName>", "<definitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentDefinition_GetEnvironmentDefinition_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironmentDefinition("<projectName>", "<catalogName>", "<definitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
            Console.WriteLine(result.GetProperty("parametersSchema").ToString());
            Console.WriteLine(result.GetProperty("templatePath").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentDefinition_GetEnvironmentDefinition_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentDefinitionAsync("<projectName>", "<catalogName>", "<definitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
            Console.WriteLine(result.GetProperty("parametersSchema").ToString());
            Console.WriteLine(result.GetProperty("templatePath").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentDefinition_GetEnvironmentDefinition_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentDefinition> response = client.GetEnvironmentDefinition("<projectName>", "<catalogName>", "<definitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentDefinition_GetEnvironmentDefinition_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Response<EnvironmentDefinition> response = await client.GetEnvironmentDefinitionAsync("<projectName>", "<catalogName>", "<definitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetAllEnvironments_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetAllEnvironments("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetAllEnvironments_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllEnvironmentsAsync("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetAllEnvironments_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (DevCenterEnvironment item in client.GetAllEnvironments("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetAllEnvironments_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (DevCenterEnvironment item in client.GetAllEnvironmentsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetAllEnvironments_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetAllEnvironments("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("expirationDate").ToString());
                Console.WriteLine(result.GetProperty("parameters").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetAllEnvironments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllEnvironmentsAsync("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("expirationDate").ToString());
                Console.WriteLine(result.GetProperty("parameters").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetAllEnvironments_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (DevCenterEnvironment item in client.GetAllEnvironments("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetAllEnvironments_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (DevCenterEnvironment item in client.GetAllEnvironmentsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironments_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironments("<projectName>", "<userId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironments_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentsAsync("<projectName>", "<userId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironments_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (DevCenterEnvironment item in client.GetEnvironments("<projectName>", "<userId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironments_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (DevCenterEnvironment item in client.GetEnvironmentsAsync("<projectName>", "<userId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironments_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironments("<projectName>", "<userId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("expirationDate").ToString());
                Console.WriteLine(result.GetProperty("parameters").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentsAsync("<projectName>", "<userId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("expirationDate").ToString());
                Console.WriteLine(result.GetProperty("parameters").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentType").ToString());
                Console.WriteLine(result.GetProperty("user").ToString());
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironments_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (DevCenterEnvironment item in client.GetEnvironments("<projectName>", "<userId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironments_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (DevCenterEnvironment item in client.GetEnvironmentsAsync("<projectName>", "<userId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentOperation_GetOperations_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetOperations("<projectName>", "<userId>", "<environmentName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentOperation_GetOperations_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetOperationsAsync("<projectName>", "<userId>", "<environmentName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentOperation_GetOperations_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (EnvironmentOperation item in client.GetOperations("<projectName>", "<userId>", "<environmentName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentOperation_GetOperations_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (EnvironmentOperation item in client.GetOperationsAsync("<projectName>", "<userId>", "<environmentName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentOperation_GetOperations_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetOperations("<projectName>", "<userId>", "<environmentName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("createdByObjectId").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("environmentParameters").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentOperation_GetOperations_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetOperationsAsync("<projectName>", "<userId>", "<environmentName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("createdByObjectId").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("environmentParameters").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentOperation_GetOperations_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (EnvironmentOperation item in client.GetOperations("<projectName>", "<userId>", "<environmentName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentOperation_GetOperations_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (EnvironmentOperation item in client.GetOperationsAsync("<projectName>", "<userId>", "<environmentName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentAction_GetActions_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetActions("<projectName>", "<userId>", "<environmentName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("actionType").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentAction_GetActions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetActionsAsync("<projectName>", "<userId>", "<environmentName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("actionType").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentAction_GetActions_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (EnvironmentAction item in client.GetActions("<projectName>", "<userId>", "<environmentName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentAction_GetActions_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (EnvironmentAction item in client.GetActionsAsync("<projectName>", "<userId>", "<environmentName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentAction_GetActions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetActions("<projectName>", "<userId>", "<environmentName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentAction_GetActions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetActionsAsync("<projectName>", "<userId>", "<environmentName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("actionType").ToString());
                Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentAction_GetActions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (EnvironmentAction item in client.GetActions("<projectName>", "<userId>", "<environmentName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentAction_GetActions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (EnvironmentAction item in client.GetActionsAsync("<projectName>", "<userId>", "<environmentName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Catalog_GetCatalogs_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetCatalogs("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Catalog_GetCatalogs_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetCatalogsAsync("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Catalog_GetCatalogs_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (DevCenterCatalog item in client.GetCatalogs("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Catalog_GetCatalogs_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (DevCenterCatalog item in client.GetCatalogsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Catalog_GetCatalogs_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetCatalogs("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Catalog_GetCatalogs_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetCatalogsAsync("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Catalog_GetCatalogs_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (DevCenterCatalog item in client.GetCatalogs("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Catalog_GetCatalogs_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (DevCenterCatalog item in client.GetCatalogsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentDefinitions_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentDefinitions("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentDefinitions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentDefinitionsAsync("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentDefinitions_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitions("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentDefinitions_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitionsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentDefinitions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentDefinitions("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result.GetProperty("parametersSchema").ToString());
                Console.WriteLine(result.GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentDefinitions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentDefinitionsAsync("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result.GetProperty("parametersSchema").ToString());
                Console.WriteLine(result.GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentDefinitions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitions("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentDefinitions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitionsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentDefinitionsByCatalog_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentDefinitionsByCatalog("<projectName>", "<catalogName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentDefinitionsByCatalog_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentDefinitionsByCatalogAsync("<projectName>", "<catalogName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentDefinitionsByCatalog_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitionsByCatalog("<projectName>", "<catalogName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentDefinitionsByCatalog_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitionsByCatalogAsync("<projectName>", "<catalogName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentDefinitionsByCatalog_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentDefinitionsByCatalog("<projectName>", "<catalogName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result.GetProperty("parametersSchema").ToString());
                Console.WriteLine(result.GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentDefinitionsByCatalog_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentDefinitionsByCatalogAsync("<projectName>", "<catalogName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("catalogName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result.GetProperty("parametersSchema").ToString());
                Console.WriteLine(result.GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentDefinitionsByCatalog_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitionsByCatalog("<projectName>", "<catalogName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentDefinitionsByCatalog_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitionsByCatalogAsync("<projectName>", "<catalogName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentTypes_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentTypes("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentTypes_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentTypesAsync("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentTypes_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (DevCenterEnvironmentType item in client.GetEnvironmentTypes("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentTypes_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (DevCenterEnvironmentType item in client.GetEnvironmentTypesAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentTypes_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentTypes("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentTypes_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentTypesAsync("<projectName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("uri").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_GetEnvironmentTypes_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            foreach (DevCenterEnvironmentType item in client.GetEnvironmentTypes("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_GetEnvironmentTypes_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            await foreach (DevCenterEnvironmentType item in client.GetEnvironmentTypesAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_CreateOrUpdateEnvironment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Operation<BinaryData> operation = client.CreateOrUpdateEnvironment(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_CreateOrUpdateEnvironment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_CreateOrUpdateEnvironment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                expirationDate = "2022-05-10T14:57:31.2311892-04:00",
                parameters = new
                {
                    key = new object(),
                },
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Operation<BinaryData> operation = client.CreateOrUpdateEnvironment(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("expirationDate").ToString());
            Console.WriteLine(result.GetProperty("parameters").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_CreateOrUpdateEnvironment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                expirationDate = "2022-05-10T14:57:31.2311892-04:00",
                parameters = new
                {
                    key = new object(),
                },
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("expirationDate").ToString());
            Console.WriteLine(result.GetProperty("parameters").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("uri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_DeleteEnvironment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Operation operation = client.DeleteEnvironment(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_DeleteEnvironment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Operation operation = await client.DeleteEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnvironmentClientOperations_DeleteEnvironment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Operation operation = client.DeleteEnvironment(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnvironmentClientOperations_DeleteEnvironment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeploymentEnvironmentsClient client = new DeploymentEnvironmentsClient(endpoint, credential);

            Operation operation = await client.DeleteEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<environmentName>");
        }
    }
}
