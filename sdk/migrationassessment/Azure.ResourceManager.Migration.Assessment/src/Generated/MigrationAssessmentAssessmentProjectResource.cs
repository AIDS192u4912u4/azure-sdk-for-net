// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Migration.Assessment.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Migration.Assessment
{
    /// <summary>
    /// A Class representing a MigrationAssessmentAssessmentProject along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct a <see cref="MigrationAssessmentAssessmentProjectResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetMigrationAssessmentAssessmentProjectResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource"/> using the GetMigrationAssessmentAssessmentProject method.
    /// </summary>
    public partial class MigrationAssessmentAssessmentProjectResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="MigrationAssessmentAssessmentProjectResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="projectName"> The projectName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string projectName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics;
        private readonly AssessmentProjectsRestOperations _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient;
        private readonly MigrationAssessmentAssessmentProjectData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Migrate/assessmentProjects";

        /// <summary> Initializes a new instance of the <see cref="MigrationAssessmentAssessmentProjectResource"/> class for mocking. </summary>
        protected MigrationAssessmentAssessmentProjectResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MigrationAssessmentAssessmentProjectResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal MigrationAssessmentAssessmentProjectResource(ArmClient client, MigrationAssessmentAssessmentProjectData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="MigrationAssessmentAssessmentProjectResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MigrationAssessmentAssessmentProjectResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Migration.Assessment", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string migrationAssessmentAssessmentProjectAssessmentProjectsOperationsApiVersion);
            _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient = new AssessmentProjectsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, migrationAssessmentAssessmentProjectAssessmentProjectsOperationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual MigrationAssessmentAssessmentProjectData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of MigrationAssessmentAssessmentOptionResources in the MigrationAssessmentAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrationAssessmentAssessmentOptionResources and their operations over a MigrationAssessmentAssessmentOptionResource. </returns>
        public virtual MigrationAssessmentAssessmentOptionCollection GetMigrationAssessmentAssessmentOptions()
        {
            return GetCachedClient(client => new MigrationAssessmentAssessmentOptionCollection(client, Id));
        }

        /// <summary>
        /// Get a AssessmentOptions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions/{assessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentOptionsName"> assessment options ARM name. Accepted value is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessmentAssessmentOptionResource>> GetMigrationAssessmentAssessmentOptionAsync(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessmentAssessmentOptions().GetAsync(assessmentOptionsName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a AssessmentOptions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions/{assessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentOptionsName"> assessment options ARM name. Accepted value is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessmentAssessmentOptionResource> GetMigrationAssessmentAssessmentOption(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessmentAssessmentOptions().Get(assessmentOptionsName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessmentAvsAssessmentOptionResources in the MigrationAssessmentAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrationAssessmentAvsAssessmentOptionResources and their operations over a MigrationAssessmentAvsAssessmentOptionResource. </returns>
        public virtual MigrationAssessmentAvsAssessmentOptionCollection GetMigrationAssessmentAvsAssessmentOptions()
        {
            return GetCachedClient(client => new MigrationAssessmentAvsAssessmentOptionCollection(client, Id));
        }

        /// <summary>
        /// Get a AvsAssessmentOptions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/avsAssessmentOptions/{avsAssessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AvsAssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAvsAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="avsAssessmentOptionsName"> AVS Assessment options ARM name. Accepted value is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="avsAssessmentOptionsName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="avsAssessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessmentAvsAssessmentOptionResource>> GetMigrationAssessmentAvsAssessmentOptionAsync(string avsAssessmentOptionsName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessmentAvsAssessmentOptions().GetAsync(avsAssessmentOptionsName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a AvsAssessmentOptions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/avsAssessmentOptions/{avsAssessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AvsAssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAvsAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="avsAssessmentOptionsName"> AVS Assessment options ARM name. Accepted value is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="avsAssessmentOptionsName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="avsAssessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessmentAvsAssessmentOptionResource> GetMigrationAssessmentAvsAssessmentOption(string avsAssessmentOptionsName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessmentAvsAssessmentOptions().Get(avsAssessmentOptionsName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessmentGroupResources in the MigrationAssessmentAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrationAssessmentGroupResources and their operations over a MigrationAssessmentGroupResource. </returns>
        public virtual MigrationAssessmentGroupCollection GetMigrationAssessmentGroups()
        {
            return GetCachedClient(client => new MigrationAssessmentGroupCollection(client, Id));
        }

        /// <summary>
        /// Get a Group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentGroupResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="groupName"> Group ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessmentGroupResource>> GetMigrationAssessmentGroupAsync(string groupName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessmentGroups().GetAsync(groupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentGroupResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="groupName"> Group ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessmentGroupResource> GetMigrationAssessmentGroup(string groupName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessmentGroups().Get(groupName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessmentHyperVCollectorResources in the MigrationAssessmentAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrationAssessmentHyperVCollectorResources and their operations over a MigrationAssessmentHyperVCollectorResource. </returns>
        public virtual MigrationAssessmentHyperVCollectorCollection GetMigrationAssessmentHyperVCollectors()
        {
            return GetCachedClient(client => new MigrationAssessmentHyperVCollectorCollection(client, Id));
        }

        /// <summary>
        /// Get a HypervCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hypervCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HypervCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentHyperVCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="hyperVCollectorName"> Hyper-V collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hyperVCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="hyperVCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessmentHyperVCollectorResource>> GetMigrationAssessmentHyperVCollectorAsync(string hyperVCollectorName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessmentHyperVCollectors().GetAsync(hyperVCollectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a HypervCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hypervCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HypervCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentHyperVCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="hyperVCollectorName"> Hyper-V collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hyperVCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="hyperVCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessmentHyperVCollectorResource> GetMigrationAssessmentHyperVCollector(string hyperVCollectorName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessmentHyperVCollectors().Get(hyperVCollectorName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessmentImportCollectorResources in the MigrationAssessmentAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrationAssessmentImportCollectorResources and their operations over a MigrationAssessmentImportCollectorResource. </returns>
        public virtual MigrationAssessmentImportCollectorCollection GetMigrationAssessmentImportCollectors()
        {
            return GetCachedClient(client => new MigrationAssessmentImportCollectorCollection(client, Id));
        }

        /// <summary>
        /// Get a ImportCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/importcollectors/{importCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ImportCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentImportCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="importCollectorName"> Import collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="importCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="importCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessmentImportCollectorResource>> GetMigrationAssessmentImportCollectorAsync(string importCollectorName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessmentImportCollectors().GetAsync(importCollectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a ImportCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/importcollectors/{importCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ImportCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentImportCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="importCollectorName"> Import collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="importCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="importCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessmentImportCollectorResource> GetMigrationAssessmentImportCollector(string importCollectorName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessmentImportCollectors().Get(importCollectorName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessmentMachineResources in the MigrationAssessmentAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrationAssessmentMachineResources and their operations over a MigrationAssessmentMachineResource. </returns>
        public virtual MigrationAssessmentMachineCollection GetMigrationAssessmentMachines()
        {
            return GetCachedClient(client => new MigrationAssessmentMachineCollection(client, Id));
        }

        /// <summary>
        /// Get a Machine
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines/{machineName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MachinesOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentMachineResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="machineName"> Assessible Machine ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="machineName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="machineName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessmentMachineResource>> GetMigrationAssessmentMachineAsync(string machineName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessmentMachines().GetAsync(machineName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Machine
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines/{machineName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MachinesOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentMachineResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="machineName"> Assessible Machine ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="machineName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="machineName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessmentMachineResource> GetMigrationAssessmentMachine(string machineName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessmentMachines().Get(machineName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessmentPrivateEndpointConnectionResources in the MigrationAssessmentAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrationAssessmentPrivateEndpointConnectionResources and their operations over a MigrationAssessmentPrivateEndpointConnectionResource. </returns>
        public virtual MigrationAssessmentPrivateEndpointConnectionCollection GetMigrationAssessmentPrivateEndpointConnections()
        {
            return GetCachedClient(client => new MigrationAssessmentPrivateEndpointConnectionCollection(client, Id));
        }

        /// <summary>
        /// Get a PrivateEndpointConnection
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnectionOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentPrivateEndpointConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="privateEndpointConnectionName"> Private endpoint connection ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateEndpointConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessmentPrivateEndpointConnectionResource>> GetMigrationAssessmentPrivateEndpointConnectionAsync(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessmentPrivateEndpointConnections().GetAsync(privateEndpointConnectionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a PrivateEndpointConnection
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnectionOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentPrivateEndpointConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="privateEndpointConnectionName"> Private endpoint connection ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateEndpointConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessmentPrivateEndpointConnectionResource> GetMigrationAssessmentPrivateEndpointConnection(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessmentPrivateEndpointConnections().Get(privateEndpointConnectionName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessmentPrivateLinkResources in the MigrationAssessmentAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrationAssessmentPrivateLinkResources and their operations over a MigrationAssessmentPrivateLinkResource. </returns>
        public virtual MigrationAssessmentPrivateLinkResourceCollection GetMigrationAssessmentPrivateLinkResources()
        {
            return GetCachedClient(client => new MigrationAssessmentPrivateLinkResourceCollection(client, Id));
        }

        /// <summary>
        /// Get a PrivateLinkResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/privateLinkResources/{privateLinkResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateLinkResourceOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentPrivateLinkResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="privateLinkResourceName"> Private link resource ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateLinkResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateLinkResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessmentPrivateLinkResource>> GetMigrationAssessmentPrivateLinkResourceAsync(string privateLinkResourceName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessmentPrivateLinkResources().GetAsync(privateLinkResourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a PrivateLinkResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/privateLinkResources/{privateLinkResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateLinkResourceOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentPrivateLinkResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="privateLinkResourceName"> Private link resource ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateLinkResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateLinkResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessmentPrivateLinkResource> GetMigrationAssessmentPrivateLinkResource(string privateLinkResourceName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessmentPrivateLinkResources().Get(privateLinkResourceName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessmentAssessmentProjectSummaryResources in the MigrationAssessmentAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrationAssessmentAssessmentProjectSummaryResources and their operations over a MigrationAssessmentAssessmentProjectSummaryResource. </returns>
        public virtual MigrationAssessmentAssessmentProjectSummaryCollection GetMigrationAssessmentAssessmentProjectSummaries()
        {
            return GetCachedClient(client => new MigrationAssessmentAssessmentProjectSummaryCollection(client, Id));
        }

        /// <summary>
        /// Get a AssessmentProjectSummary
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/projectSummary/{projectSummaryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectSummaryOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentProjectSummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectSummaryName"> Group ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectSummaryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectSummaryName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessmentAssessmentProjectSummaryResource>> GetMigrationAssessmentAssessmentProjectSummaryAsync(string projectSummaryName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessmentAssessmentProjectSummaries().GetAsync(projectSummaryName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a AssessmentProjectSummary
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/projectSummary/{projectSummaryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectSummaryOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentProjectSummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectSummaryName"> Group ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectSummaryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectSummaryName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessmentAssessmentProjectSummaryResource> GetMigrationAssessmentAssessmentProjectSummary(string projectSummaryName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessmentAssessmentProjectSummaries().Get(projectSummaryName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessmentServerCollectorResources in the MigrationAssessmentAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrationAssessmentServerCollectorResources and their operations over a MigrationAssessmentServerCollectorResource. </returns>
        public virtual MigrationAssessmentServerCollectorCollection GetMigrationAssessmentServerCollectors()
        {
            return GetCachedClient(client => new MigrationAssessmentServerCollectorCollection(client, Id));
        }

        /// <summary>
        /// Get a ServerCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/servercollectors/{serverCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ServerCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentServerCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="serverCollectorName"> Physical server collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serverCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessmentServerCollectorResource>> GetMigrationAssessmentServerCollectorAsync(string serverCollectorName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessmentServerCollectors().GetAsync(serverCollectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a ServerCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/servercollectors/{serverCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ServerCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentServerCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="serverCollectorName"> Physical server collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serverCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessmentServerCollectorResource> GetMigrationAssessmentServerCollector(string serverCollectorName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessmentServerCollectors().Get(serverCollectorName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessmentSqlAssessmentOptionResources in the MigrationAssessmentAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrationAssessmentSqlAssessmentOptionResources and their operations over a MigrationAssessmentSqlAssessmentOptionResource. </returns>
        public virtual MigrationAssessmentSqlAssessmentOptionCollection GetMigrationAssessmentSqlAssessmentOptions()
        {
            return GetCachedClient(client => new MigrationAssessmentSqlAssessmentOptionCollection(client, Id));
        }

        /// <summary>
        /// Get a SqlAssessmentOptions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlAssessmentOptions/{assessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentSqlAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentOptionsName"> Sql assessment options ARM name. Accepted values is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessmentSqlAssessmentOptionResource>> GetMigrationAssessmentSqlAssessmentOptionAsync(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessmentSqlAssessmentOptions().GetAsync(assessmentOptionsName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a SqlAssessmentOptions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlAssessmentOptions/{assessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentSqlAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentOptionsName"> Sql assessment options ARM name. Accepted values is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessmentSqlAssessmentOptionResource> GetMigrationAssessmentSqlAssessmentOption(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessmentSqlAssessmentOptions().Get(assessmentOptionsName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessmentSqlCollectorResources in the MigrationAssessmentAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrationAssessmentSqlCollectorResources and their operations over a MigrationAssessmentSqlCollectorResource. </returns>
        public virtual MigrationAssessmentSqlCollectorCollection GetMigrationAssessmentSqlCollectors()
        {
            return GetCachedClient(client => new MigrationAssessmentSqlCollectorCollection(client, Id));
        }

        /// <summary>
        /// Get a SqlCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlcollectors/{collectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlCollectorOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentSqlCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectorName"> Sql collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessmentSqlCollectorResource>> GetMigrationAssessmentSqlCollectorAsync(string collectorName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessmentSqlCollectors().GetAsync(collectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a SqlCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlcollectors/{collectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlCollectorOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentSqlCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectorName"> Sql collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessmentSqlCollectorResource> GetMigrationAssessmentSqlCollector(string collectorName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessmentSqlCollectors().Get(collectorName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrationAssessmentVMwareCollectorResources in the MigrationAssessmentAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrationAssessmentVMwareCollectorResources and their operations over a MigrationAssessmentVMwareCollectorResource. </returns>
        public virtual MigrationAssessmentVMwareCollectorCollection GetMigrationAssessmentVMwareCollectors()
        {
            return GetCachedClient(client => new MigrationAssessmentVMwareCollectorCollection(client, Id));
        }

        /// <summary>
        /// Get a VmwareCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VmwareCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentVMwareCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="vmWareCollectorName"> VMware collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vmWareCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="vmWareCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrationAssessmentVMwareCollectorResource>> GetMigrationAssessmentVMwareCollectorAsync(string vmWareCollectorName, CancellationToken cancellationToken = default)
        {
            return await GetMigrationAssessmentVMwareCollectors().GetAsync(vmWareCollectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a VmwareCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VmwareCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentVMwareCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="vmWareCollectorName"> VMware collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vmWareCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="vmWareCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrationAssessmentVMwareCollectorResource> GetMigrationAssessmentVMwareCollector(string vmWareCollectorName, CancellationToken cancellationToken = default)
        {
            return GetMigrationAssessmentVMwareCollectors().Get(vmWareCollectorName, cancellationToken);
        }

        /// <summary>
        /// Get a AssessmentProject
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MigrationAssessmentAssessmentProjectResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrationAssessmentAssessmentProjectResource.Get");
            scope.Start();
            try
            {
                var response = await _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MigrationAssessmentAssessmentProjectResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a AssessmentProject
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MigrationAssessmentAssessmentProjectResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrationAssessmentAssessmentProjectResource.Get");
            scope.Start();
            try
            {
                var response = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MigrationAssessmentAssessmentProjectResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a AssessmentProject
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrationAssessmentAssessmentProjectResource.Delete");
            scope.Start();
            try
            {
                var response = await _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var uri = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.CreateDeleteRequestUri(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Delete, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new AssessmentArmOperation(response, rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a AssessmentProject
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrationAssessmentAssessmentProjectResource.Delete");
            scope.Start();
            try
            {
                var response = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var uri = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.CreateDeleteRequestUri(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Delete, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new AssessmentArmOperation(response, rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a AssessmentProject
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<ArmOperation<MigrationAssessmentAssessmentProjectResource>> UpdateAsync(WaitUntil waitUntil, MigrationAssessmentAssessmentProjectPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrationAssessmentAssessmentProjectResource.Update");
            scope.Start();
            try
            {
                var response = await _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken).ConfigureAwait(false);
                var operation = new AssessmentArmOperation<MigrationAssessmentAssessmentProjectResource>(new MigrationAssessmentAssessmentProjectOperationSource(Client), _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics, Pipeline, _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a AssessmentProject
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual ArmOperation<MigrationAssessmentAssessmentProjectResource> Update(WaitUntil waitUntil, MigrationAssessmentAssessmentProjectPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrationAssessmentAssessmentProjectResource.Update");
            scope.Start();
            try
            {
                var response = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken);
                var operation = new AssessmentArmOperation<MigrationAssessmentAssessmentProjectResource>(new MigrationAssessmentAssessmentProjectOperationSource(Client), _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics, Pipeline, _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual async Task<Response<MigrationAssessmentAssessmentProjectResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrationAssessmentAssessmentProjectResource.AddTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues[key] = value;
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new MigrationAssessmentAssessmentProjectResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new MigrationAssessmentAssessmentProjectPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual Response<MigrationAssessmentAssessmentProjectResource> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrationAssessmentAssessmentProjectResource.AddTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues[key] = value;
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new MigrationAssessmentAssessmentProjectResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new MigrationAssessmentAssessmentProjectPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual async Task<Response<MigrationAssessmentAssessmentProjectResource>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrationAssessmentAssessmentProjectResource.SetTags");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    await GetTagResource().DeleteAsync(WaitUntil.Completed, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new MigrationAssessmentAssessmentProjectResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new MigrationAssessmentAssessmentProjectPatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual Response<MigrationAssessmentAssessmentProjectResource> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrationAssessmentAssessmentProjectResource.SetTags");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    GetTagResource().Delete(WaitUntil.Completed, cancellationToken: cancellationToken);
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new MigrationAssessmentAssessmentProjectResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new MigrationAssessmentAssessmentProjectPatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual async Task<Response<MigrationAssessmentAssessmentProjectResource>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrationAssessmentAssessmentProjectResource.RemoveTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.Remove(key);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new MigrationAssessmentAssessmentProjectResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new MigrationAssessmentAssessmentProjectPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrationAssessmentAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual Response<MigrationAssessmentAssessmentProjectResource> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrationAssessmentAssessmentProjectResource.RemoveTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.Remove(key);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _migrationAssessmentAssessmentProjectAssessmentProjectsOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new MigrationAssessmentAssessmentProjectResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new MigrationAssessmentAssessmentProjectPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
